{"version":3,"sources":["lineFlowAnimation.js","registerServiceWorker.js","index.js"],"names":["LineFlowAnimation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomChars","split","startupTime","lines","maxLineLength","getMaxLineLength","state","step","printableLines","react_default","a","createElement","handleClickBodyText","bind","assertThisInitialized","currentMaxLineLength","i","length","_this2","tempLines","j","push","substring","numberOfCharactersLeft","tempLength","k","charAt","Math","floor","random","setState","map","line","onClick","_this3","setTimeout","generateRandomText","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","lineFlowAnimation","href","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7efd7e3a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nclass LineFlowAnimation extends React.Component {\n  // Alphanumeric characters that are monospaced in Roboto Mono\n  randomChars = \"QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890\".split(\"\");\n\n  // Time in MS to wait before actually filling in real characters\n  startupTime = -25;\n\n  constructor(props) {\n    super(props);\n    this.lines = props.lines;\n    this.maxLineLength = this.getMaxLineLength();\n\n    this.state = {\n      step: this.startupTime,\n      printableLines: <p />\n    };\n\n    this.handleClickBodyText = this.handleClickBodyText.bind(this);\n  }\n\n  /**\n   * Returns the length of the longest line in an array.\n   *\n   * @param lines Array of Strings\n   * @returns {number} maximum length\n   */\n  getMaxLineLength() {\n    let currentMaxLineLength = 0;\n\n    for (let i = 0; i < this.lines.length; i++) {\n      if (this.lines[i].length > currentMaxLineLength) {\n        currentMaxLineLength = this.lines[i].length;\n      }\n    }\n    return currentMaxLineLength;\n  }\n\n  /**\n   * Generates random text and sets the state to it\n   */\n  generateRandomText() {\n    let tempLines = [];\n    for (let j = 0; j < this.lines.length; j++) {\n      // Adds the substring\n      if (this.state.step < this.lines[j].length) {\n        tempLines.push(this.lines[j].substring(0, this.state.step));\n      } else {\n        tempLines.push(this.lines[j]);\n      }\n\n      // Adds random characters to length of line. Also adds correct word spacing\n      // for rendering issues.\n      let numberOfCharactersLeft = this.lines[j].length - tempLines[j].length;\n      let tempLength = tempLines[j].length;\n      for (let k = 0; k < numberOfCharactersLeft; k++) {\n        if (this.lines[j].charAt(tempLength + k) !== \" \") {\n          tempLines[j] =\n            tempLines[j] + this.randomChars[Math.floor(Math.random() * this.randomChars.length)];\n        } else {\n          tempLines[j] = tempLines[j] + \" \";\n        }\n      }\n    }\n\n    // Creates multiple <p> tags for each line\n    this.setState({\n      printableLines: tempLines.map(line => <p onClick={this.handleClickBodyText}>{line}</p>),\n      step: this.state.step + 1\n    });\n  }\n\n  /**\n   * Handles re-running the animation if someone clicks on the body text.\n   */\n  handleClickBodyText() {\n    if (this.state.step >= this.maxLineLength) {\n      this.setState({\n        step: this.startupTime\n      });\n    }\n  }\n\n  render() {\n    // Start re-generating random text if it isn't all legible yet\n    if (this.state.step <= this.maxLineLength) {\n      setTimeout(() => {\n        this.generateRandomText();\n      }, 25);\n    }\n    return this.state.printableLines;\n  }\n}\n\nexport default LineFlowAnimation;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport LineFlowAnimation from \"./lineFlowAnimation\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <div>\n    <LineFlowAnimation\n      lines={[\n        \"Hello.\",\n        \"My name is Hayden Hong.\",\n        \"I am a software development engineer at Amazon.\",\n        \"I also make iOS apps in my spare time.\"\n      ]}\n    />\n    <a href=\"https://github.com/AFRUITPIE\">GitHub</a>\n    <a href=\"https://www.linkedin.com/in/hayden-hong-software/\">LinkedIn</a>\n  </div>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}